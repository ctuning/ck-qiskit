diff --git a/qiskit/tools/apps/optimization.py b/qiskit/tools/apps/optimization.py
index ae3cb85..c42381d 100644
--- a/qiskit/tools/apps/optimization.py
+++ b/qiskit/tools/apps/optimization.py
@@ -279,13 +279,19 @@ def eval_hamiltonian(Q_program, hamiltonian, input_circuit, shots, device):
         float: Average value of the Hamiltonian or observable.
     """
     energy = 0
+    """"
+    LOAD CK_IBM_TIMEOUT from env... 
 
+    """
+    tout = 60
+    if 'CK_IBM_TIMEOUT' in os.environ:
+        tout = int(os.environ['CK_IBM_TIMEOUT'])
     if 'statevector' in device:
         # Hamiltonian is not a pauli_list grouped into tpb sets
         if not isinstance(hamiltonian, list):
             circuit = ['c' + str(uuid.uuid4())]    # unique random circuit for no collision
             Q_program.add_circuit(circuit[0], input_circuit)
-            result = Q_program.execute(circuit, device, shots=shots,
+            result = Q_program.execute(circuit, device, shots=shots, timeout=tout
                                        config={"data": ["statevector"]})
             statevector = result.get_data(circuit[0]).get('statevector')
             if statevector is None:
@@ -327,7 +333,7 @@ def eval_hamiltonian(Q_program, hamiltonian, input_circuit, shots, device):
                 circuits_labels.append('circuit_label' + str(i) + str(uuid.uuid4()))
                 Q_program.add_circuit(circuits_labels[i], circuits[i])
                 i += 1
-            result = Q_program.execute(circuits_labels, device, shots=shots)
+            result = Q_program.execute(circuits_labels, device, shots=shots, timeout=tout)
             # no Pauli final rotations
             statevector_0 = result.get_data(
                 circuits_labels[0])['statevector']
@@ -361,7 +367,7 @@ def eval_hamiltonian(Q_program, hamiltonian, input_circuit, shots, device):
                 circuits[i].measure(q[j], c[j])
             Q_program.add_circuit(circuits_labels[i], circuits[i])
             i += 1
-        result = Q_program.execute(circuits_labels, device, shots=shots)
+        result = Q_program.execute(circuits_labels, device, shots=shots, timeout=tout)
         for j, _ in enumerate(hamiltonian):
             for k, _ in enumerate(hamiltonian[j]):
                 energy += hamiltonian[j][k][0] *\
